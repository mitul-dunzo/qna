// Code generated by MockGen. DO NOT EDIT.
// Source: qna/main/services (interfaces: IOtpService)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	dtos "qna/main/dtos"
	reflect "reflect"
)

// MockIOtpService is a mock of IOtpService interface
type MockIOtpService struct {
	ctrl     *gomock.Controller
	recorder *MockIOtpServiceMockRecorder
}

// MockIOtpServiceMockRecorder is the mock recorder for MockIOtpService
type MockIOtpServiceMockRecorder struct {
	mock *MockIOtpService
}

// NewMockIOtpService creates a new mock instance
func NewMockIOtpService(ctrl *gomock.Controller) *MockIOtpService {
	mock := &MockIOtpService{ctrl: ctrl}
	mock.recorder = &MockIOtpServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIOtpService) EXPECT() *MockIOtpServiceMockRecorder {
	return m.recorder
}

// SendOtp mocks base method
func (m *MockIOtpService) SendOtp(arg0 *dtos.UserDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtp", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOtp indicates an expected call of SendOtp
func (mr *MockIOtpServiceMockRecorder) SendOtp(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtp", reflect.TypeOf((*MockIOtpService)(nil).SendOtp), arg0)
}

// ValidateOtp mocks base method
func (m *MockIOtpService) ValidateOtp(arg0, arg1 string) (*dtos.UserDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateOtp", arg0, arg1)
	ret0, _ := ret[0].(*dtos.UserDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateOtp indicates an expected call of ValidateOtp
func (mr *MockIOtpServiceMockRecorder) ValidateOtp(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateOtp", reflect.TypeOf((*MockIOtpService)(nil).ValidateOtp), arg0, arg1)
}
